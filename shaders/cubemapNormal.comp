#version 430

layout (binding = 0, rgba32f) uniform imageCube cubemapTexture;
layout (local_size_x = 16, local_size_y = 16) in;

uniform samplerCube u_TerrainCubemap;

void main() {
    uvec3 globalID = gl_GlobalInvocationID;
    uint faceIndex = globalID.z;

    float x = (globalID.x / 511.0) * 2.0 - 1.0; // [-1, 1]
    float y = (globalID.y / 511.0) * 2.0 - 1.0; // [-1, 1]
    float z;

    vec3 normal;

    switch (faceIndex) {
        case 0: // pos X
            normal = vec3(1.0, y, -x);
            break;
        case 1: // neg X
            normal = vec3(-1.0, y, x);
            break;
        case 2: // pos Y
            normal = vec3(x, -1.0, y);
            break;
        case 3: // neg Y
            normal = vec3(x, 1.0, -y);
            break;
        case 4: // pos Z
            normal = vec3(x, y, 1.0);
            break;
        case 5: // neg Z
            normal = vec3(-x, y, -1.0);
            break;
        default:
            normal = vec3(1.0);
            break;
    }

    normal.y = -normal.y; // Dont know why it works, but it does
    normal = normalize(normal);

    // Calucalte spherical coordinats from normal for TBN
    float theta = atan(normal.z, normal.x); // [-pi/2, pi/2]
    float phi = acos(normal.y);             // [-pi, pi]

    // Calculate TBN
    vec3 tangent = normalize(vec3(-sin(theta), 0.0, cos(theta)));
    vec3 bitangent = normalize(cross(normal, tangent));
    mat3 TBN = mat3(tangent, bitangent, normal);

    float offset = 0.01;

    // Calculate new smapling points via TBN matrix
    vec3 sampleLeft   = normalize(TBN * vec3(-offset, 0.0, 1.0));
    vec3 sampleRight  = normalize(TBN * vec3( offset, 0.0, 1.0));
    vec3 sampleUp     = normalize(TBN * vec3(0.0, -offset, 1.0));
    vec3 sampleDown   = normalize(TBN * vec3(0.0,  offset, 1.0));

    // Sample surrounding heights
    float heightLeft  = texture(u_TerrainCubemap, sampleLeft).r;
    float heightRight = texture(u_TerrainCubemap, sampleRight).r;
    float heightUp    = texture(u_TerrainCubemap, sampleUp).r;
    float heightDown  = texture(u_TerrainCubemap, sampleDown).r;

    // Calculate normal
    vec3 displacedNormal = vec3(heightRight - heightLeft, heightUp - heightDown, 1.0);
    displacedNormal = normalize(TBN * displacedNormal); // Multiply by TBN so calulation doesn't have to be ran in fragment shader
    
    imageStore(cubemapTexture, ivec3(globalID.x, globalID.y, faceIndex), vec4(displacedNormal, 1.0)); // [-1, 1], can be stored as float not uchar
}